---
import Head from '$commons/head.astro'
import Breadcrumb from '$components/breadcrumb.astro'
import BaseLayout from '$layouts/base.astro'

const { name } = Astro.params
if (!name) {
  return new Response(null, {
    status: 404,
    statusText: 'Not found',
  })
}

// Get query parameters
const key = Astro.url.searchParams.get('key') || ''

// Normalize the name to ensure it's lowercase
const groupName = name.toLowerCase()

// Get backend client from Astro.locals
const backend = Astro.locals.backend

// Get the authenticated user
const user = Astro.locals.user
if (!user) {
  return Astro.redirect(
    '/auth/login?dest=' +
      encodeURIComponent(Astro.url.pathname + Astro.url.search)
  )
}

// Initial states
let joinabilityResult: any = null 
let error: string | null = null
let success: string | null = null
let isJoining = false

// Check if we have an invite key
if (!key) {
  // If no key, redirect to members page
  return Astro.redirect(`/wg/${groupName}/members`)
}

// Check joinability using the new unified endpoint
try {
  joinabilityResult = await backend.workingGroups.checkJoinability.query({ inviteKey: key })
  
  // If user is already a member, redirect to members page
  if (joinabilityResult.userIsAlreadyMember) {
    return Astro.redirect(`/wg/${groupName}/members`)
  }
  
  // If there's an error message, set it
  if (joinabilityResult.errorMessage && !joinabilityResult.canJoin) {
    error = joinabilityResult.errorMessage
  }
} catch (e) {
  console.error('Error checking joinability:', e)
  error = 'Unable to verify join eligibility. Please try again.'
}

// Handle join request
if (Astro.request.method === 'POST' && joinabilityResult) {
  isJoining = true

  try {
    // Check if we can join
    if (!joinabilityResult.canJoin) {
      error = 'You must fulfill all requirements before joining'
    } else {
      // Join the working group using the secure endpoint
      await backend.workingGroups.joinWithInviteKey.mutate({ inviteKey: key })
      success = `You have successfully joined the ${joinabilityResult.group.name} Working Group`
    }
  } catch (e) {
    console.error('Error joining working group:', e)
    error = e instanceof Error ? e.message : 'Unknown error'
  }

  isJoining = false
}

const title = joinabilityResult?.group?.name 
  ? `Join ${joinabilityResult.group.name} Working Group` 
  : 'Invalid Invite'
---

<Head title={title} />

<BaseLayout class="mx-auto mt-8 max-w-7xl space-y-6 *:px-6">
  <Breadcrumb
    parents={[
      { title: 'Working Groups', href: `/wg/${groupName}/members` }
    ]}
    title="Join Working Group"
  />

  <div class="mx-auto max-w-2xl space-y-6">
    <div class="mb-4 flex items-center justify-between">
      <h1 class="text-3xl font-bold">{title}</h1>
      {
        joinabilityResult?.group?.name && (
          <a
            href={`/wg/${groupName}/members`}
            class="rounded bg-gray-100 px-4 py-2 text-gray-700 transition hover:bg-gray-200"
          >
            Back to Group
          </a>
        )
      }
    </div>

      {/* Error message */}
      {
        error && (
          <div
            class="mb-6 border-l-4 border-red-500 bg-red-100 p-4 text-red-700"
            role="alert"
          >
            <p>{error}</p>
          </div>
        )
      }

      {/* Success message */}
      {
        success && (
          <div
            class="mb-6 border-l-4 border-green-500 bg-green-100 p-4 text-green-700"
            role="alert"
          >
            <p>{success}</p>
            <p class="mt-2">
              <a
                href={`/wg/${groupName}/members`}
                class="inline-block rounded bg-green-600 px-4 py-2 text-white transition hover:bg-green-700"
              >
                View Group Members
              </a>
            </p>
          </div>
        )
      }

      {/* Join form */}
      {
        joinabilityResult?.group?.name && !success && (
          <div class="rounded-lg bg-white p-6 shadow-md">
            <h2 class="mb-4 text-xl font-semibold">Join Working Group</h2>

            {/* Requirements section */}
            <div class="mb-6">
              <h3 class="mb-2 text-lg font-medium">Requirements</h3>
              <p class="mb-4 text-gray-600">
                To join this working group, you need to meet the following
                requirements:
              </p>

              <div class="mb-4 space-y-2">
                {joinabilityResult.requirements.map((req: any) => (
                  <div class="flex items-center">
                    <span
                      class={`mr-2 inline-block h-5 w-5 rounded-full ${req.met ? 'bg-green-500' : 'bg-red-500'}`}
                    >
                      {req.met && (
                        <svg
                          xmlns="http://www.w3.org/2000/svg"
                          viewBox="0 0 24 24"
                          fill="white"
                          class="h-5 w-5"
                        >
                          <path
                            fill-rule="evenodd"
                            d="M19.916 4.626a.75.75 0 01.208 1.04l-9 13.5a.75.75 0 01-1.154.114l-6-6a.75.75 0 011.06-1.06l5.353 5.353 8.493-12.739a.75.75 0 011.04-.208z"
                            clip-rule="evenodd"
                          />
                        </svg>
                      )}
                    </span>
                    <span>{req.displayName}</span>
                    {!req.met && req.callToAction && (
                      <a
                        href={req.callToAction.url}
                        class="ml-2 text-sm text-blue-600 hover:underline"
                        target="_blank"
                      >
                        {req.callToAction.text}
                      </a>
                    )}
                  </div>
                ))}
              </div>
            </div>

            {/* Profile information section */}
            <div class="mb-6">
              <h3 class="mb-2 text-lg font-medium">Your Information</h3>
              <p class="mb-4 text-gray-600">
                The following information will be shared with all members of the
                working group:
              </p>

              <div class="rounded border border-gray-200 bg-gray-50 p-4">
                <div class="space-y-2">
                  {Object.entries(joinabilityResult.profileSnapshot).map(([key, value]: [string, any]) => (
                    <div class="grid grid-cols-3">
                      <div class="text-gray-600 capitalize">
                        {key.replace(/([A-Z])/g, ' $1').trim()}
                      </div>
                      <div class="col-span-2">
                        {value || (
                          <span class="text-gray-400">Not provided</span>
                        )}
                      </div>
                    </div>
                  ))}
                </div>
              </div>
            </div>

            {/* Join form */}
            <form method="POST">
              <input type="hidden" name="inviteKey" value={key} />

              <div class="mb-4">
                <label class="mb-2 flex items-center">
                  <input
                    type="checkbox"
                    required
                    class="mr-2 h-4 w-4 rounded border-gray-300"
                  />
                  <span>
                    I agree to share my information with this working group
                  </span>
                </label>
              </div>

              <button
                type="submit"
                class="rounded bg-blue-600 px-4 py-2 text-white transition hover:bg-blue-700 disabled:cursor-not-allowed disabled:opacity-50"
                disabled={!joinabilityResult.canJoin || isJoining}
              >
                {isJoining ? 'Joining...' : 'Join Working Group'}
              </button>

              {!joinabilityResult.canJoin && (
                <p class="mt-2 text-sm text-red-600">
                  Please fulfill all requirements before joining
                </p>
              )}
            </form>
          </div>
        )
      }

      {/* Loading state */}
      {
        !joinabilityResult && !error && (
          <div class="rounded-lg bg-white p-6 shadow-md">
            <p>Loading...</p>
          </div>
        )
      }
    </div>
  </div>
</BaseLayout>
