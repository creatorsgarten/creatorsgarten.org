---
import MainHorizontalPadding from '$components/mainHorizontalPadding.astro'
import Layout from '$layouts/wiki.astro'

const { name } = Astro.params
if (!name) {
  return new Response(null, {
    status: 404,
    statusText: 'Not found',
  })
}

// Get query parameters
const key = Astro.url.searchParams.get('key') || ''

// Normalize the name to ensure it's lowercase
const groupName = name.toLowerCase()

// Get backend client from Astro.locals
const backend = Astro.locals.backend

// Get the authenticated user
const user = Astro.locals.user
if (!user) {
  return Astro.redirect(
    '/auth/login?dest=' +
      encodeURIComponent(Astro.url.pathname + Astro.url.search)
  )
}

// Initial states
let group: any = null
let error: string | null = null
let success: string | null = null
let isJoining = false
const requiredConnections =
  await backend.workingGroups.getRequiredConnections.query()

// Check if the invite key is valid using the safe public endpoint
if (key) {
  try {
    // This now uses the secure version that only returns minimal info needed for joining
    group = await backend.workingGroups.getByInviteKey.query({ inviteKey: key })
  } catch (e) {
    console.error('Error fetching working group by invite key:', e)
    error = 'Invalid invite link. Please ask for a new invite.'
  }
} else {
  // If no key, redirect to members page
  return Astro.redirect(`/wg/${groupName}/members`)
}

// Check if user is already a member
const isUserMember = group
  ? await backend.workingGroups.isUserMember.query({ groupId: group.id })
  : false

if (isUserMember) {
  // If user is already a member, redirect to members page
  console.error('User is already a member of the group', groupName, user.sub)
  return Astro.redirect(`/wg/${groupName}/members`)
}

// Check which connections the user has
const missingConnections = requiredConnections.filter(
  conn => !user.connections[conn as keyof typeof user.connections]
)

// Prepare the profile data to show
const profileData = {
  name: user.name,
  email: user.email,
  githubUsername: user.connections.github?.username,
  discordName: user.connections.discord?.username,
  googleAccount: user.connections.google?.email,
  figmaEmail: user.connections.figma?.email,
}

// Handle join request
if (Astro.request.method === 'POST' && group) {
  isJoining = true

  try {
    // Check if user has all required connections
    if (missingConnections.length > 0) {
      error = 'You must connect all required accounts before joining'
    } else {
      // Join the working group using the secure endpoint
      await backend.workingGroups.joinWithInviteKey.mutate({ inviteKey: key })
      success = `You have successfully joined the ${group.name} Working Group`
    }
  } catch (e) {
    console.error('Error joining working group:', e)
    error = e instanceof Error ? e.message : 'Unknown error'
  }

  isJoining = false
}

const title = group ? `Join ${group.name} Working Group` : 'Invalid Invite'
---

<Layout title={title}>
  <MainHorizontalPadding>
    <div class="py-8">
      <div class="mb-4 flex items-center justify-between">
        <h1 class="text-3xl font-bold">{title}</h1>
        {
          group && (
            <a
              href={`/wg/${groupName}/members`}
              class="rounded bg-gray-100 px-4 py-2 text-gray-700 transition hover:bg-gray-200"
            >
              Back to Group
            </a>
          )
        }
      </div>

      {
        error && (
          <div
            class="mb-6 border-l-4 border-red-500 bg-red-100 p-4 text-red-700"
            role="alert"
          >
            <p>{error}</p>
          </div>
        )
      }

      {
        success && (
          <div
            class="mb-6 border-l-4 border-green-500 bg-green-100 p-4 text-green-700"
            role="alert"
          >
            <p>{success}</p>
            <p class="mt-2">
              <a
                href={`/wg/${groupName}/members`}
                class="inline-block rounded bg-green-600 px-4 py-2 text-white transition hover:bg-green-700"
              >
                View Group Members
              </a>
            </p>
          </div>
        )
      }

      {
        group && !success && (
          <div class="rounded-lg bg-white p-6 shadow-md">
            <h2 class="mb-4 text-xl font-semibold">Join Working Group</h2>

            <div class="mb-6">
              <h3 class="mb-2 text-lg font-medium">Requirements</h3>
              <p class="mb-4 text-gray-600">
                To join this working group, you need to connect the following
                accounts:
              </p>

              <div class="mb-4 space-y-2">
                {requiredConnections.map(conn => (
                  <div class="flex items-center">
                    <span
                      class={`mr-2 inline-block h-5 w-5 rounded-full ${user.connections[conn as keyof typeof user.connections] ? 'bg-green-500' : 'bg-red-500'}`}
                    >
                      {user.connections[
                        conn as keyof typeof user.connections
                      ] && (
                        <svg
                          xmlns="http://www.w3.org/2000/svg"
                          viewBox="0 0 24 24"
                          fill="white"
                          class="h-5 w-5"
                        >
                          <path
                            fill-rule="evenodd"
                            d="M19.916 4.626a.75.75 0 01.208 1.04l-9 13.5a.75.75 0 01-1.154.114l-6-6a.75.75 0 011.06-1.06l5.353 5.353 8.493-12.739a.75.75 0 011.04-.208z"
                            clip-rule="evenodd"
                          />
                        </svg>
                      )}
                    </span>
                    <span class="capitalize">{conn} Account</span>
                    {!user.connections[
                      conn as keyof typeof user.connections
                    ] && (
                      <a
                        href={`/connections#${conn}`}
                        class="ml-2 text-sm text-blue-600 hover:underline"
                        target="_blank"
                      >
                        Connect
                      </a>
                    )}
                  </div>
                ))}
              </div>
            </div>

            <div class="mb-6">
              <h3 class="mb-2 text-lg font-medium">Your Information</h3>
              <p class="mb-4 text-gray-600">
                The following information will be shared with all members of the
                working group:
              </p>

              <div class="rounded border border-gray-200 bg-gray-50 p-4">
                <div class="space-y-2">
                  {Object.entries(profileData).map(([key, value]) => (
                    <div class="grid grid-cols-3">
                      <div class="text-gray-600 capitalize">
                        {key.replace(/([A-Z])/g, ' $1').trim()}
                      </div>
                      <div class="col-span-2">
                        {value || (
                          <span class="text-gray-400">Not provided</span>
                        )}
                      </div>
                    </div>
                  ))}
                </div>
              </div>
            </div>

            <form method="POST">
              <input type="hidden" name="inviteKey" value={key} />

              <div class="mb-4">
                <label class="mb-2 flex items-center">
                  <input
                    type="checkbox"
                    required
                    class="mr-2 h-4 w-4 rounded border-gray-300"
                  />
                  <span>
                    I agree to share my information with this working group
                  </span>
                </label>
              </div>

              <button
                type="submit"
                class="rounded bg-blue-600 px-4 py-2 text-white transition hover:bg-blue-700 disabled:cursor-not-allowed disabled:opacity-50"
                disabled={missingConnections.length > 0 || isJoining}
              >
                {isJoining ? 'Joining...' : 'Join Working Group'}
              </button>

              {missingConnections.length > 0 && (
                <p class="mt-2 text-sm text-red-600">
                  Please connect all required accounts before joining
                </p>
              )}
            </form>
          </div>
        )
      }

      {
        !group && !error && (
          <div class="rounded-lg bg-white p-6 shadow-md">
            <p>Loading...</p>
          </div>
        )
      }
    </div>
  </MainHorizontalPadding>
</Layout>
