---
import Breadcrumb from '$components/breadcrumb.astro'
import Head from '$commons/head.astro'
import MainHorizontalPadding from '$components/mainHorizontalPadding.astro'
import CueHighlighter from '$videos/cueHighlighter'
import VideoActions from '$videos/videoActions.astro'
import VideoTranscript from '$videos/videoTranscript.astro'
import MetadataTable from '$wiki/sidebar/metadataTable.astro'
import { formatTimecode } from '$functions/formatTimecode'
import { getVideoIndex } from '$functions/getVideos'
import BaseLayout from '$layouts/base.astro'

const index = await getVideoIndex()
const eventId = Astro.params.eventId!
const slug = Astro.params.slug!
const isPreview = Astro.url.searchParams.has('preview')

// Find video in either published or all videos depending on preview parameter
const videoSource = isPreview ? index.videosIncludingDrafts : index.videos
const video = videoSource.find(
  video => video.eventId === eventId && video.slug === slug
)
if (!video) {
  return new Response(null, {
    status: 404,
    statusText: 'Not found',
  })
}
const iframeId = `youtube-${video.youtubeId}-${eventId}-${slug}`
const transcriptLanguage = video.transcriptRef?.endsWith('_th') ? 'th' : 'en'
const transcriptUrl = `https://github.com/creatorsgarten/videos/blob/main/data/videos/${video.transcriptRef}.vtt`

const title = [video.title, video.speakers.join(', '), video.eventTitle]
  .filter(x => x.trim())
  .join(' ¬∑ ')
const description = (video.description || '')
  .split('\n')
  .filter(x => x.trim())[0]
const ogImage = `https://screenshot.source.in.th/image/_/creatorsgarten-videos/${eventId}/${slug}`

// Add draft status indicator for unpublished videos
const isDraft = isPreview && !index.videos.some(
  v => v.eventId === eventId && v.slug === slug
)
---

<Head title={title} description={description} ogImage={ogImage} />

<BaseLayout>
  <MainHorizontalPadding>
    <Breadcrumb
      parents={[{ title: 'üéûÔ∏è Videos', href: '/videos' }]}
      title={`${video.title}${isDraft ? ' (Draft)' : ''}`}
    />
    {isDraft && (
      <div class="mt-4 rounded-md bg-yellow-100 p-4 text-yellow-800">
        <p class="font-medium">‚ö†Ô∏è This is an unpublished draft video</p>
        <p class="text-sm">This video is not yet published and is only visible with the preview parameter.</p>
      </div>
    )}
    <div
      class="my-8 grid grid-cols-[1fr] items-start gap-6 lg:grid-cols-[1fr_1fr] xl:grid-cols-[1fr_600px]"
    >
      <div class="sticky top-0 z-30 -mx-4 bg-white lg:top-20 lg:mx-0">
        <div class="mx-auto aspect-16/9 w-full">
          <iframe
            id={iframeId}
            src={`https://www.youtube.com/embed/${video.youtubeId}?enablejsapi=1`}
            class="aspect-16/9 w-full"
            style="border:0"
            loading="lazy"
            allowfullscreen></iframe>
        </div>
        <div class="mt-4 hidden lg:block">
          <VideoActions eventId={eventId} slug={slug} />
        </div>
      </div>
      <div data-cue-by={iframeId}>
        <div class="bg-neutral-100 p-6">
          <MetadataTable>
            <Fragment slot="table">
              <tr>
                <td>Event</td>
                <td>
                  <a href={`/videos/${video.eventId}`}>{video.eventTitle}</a>
                </td>
              </tr>
              {
                video.speakers.length > 0 && (
                  <tr>
                    <td>
                      {video.speakers.length > 1 ? 'Speakers' : 'Speaker'}
                    </td>
                    <td>
                      {video.speakers.map(speaker => (
                        <p>
                          <a
                            href={`/videos?speaker=${encodeURIComponent(speaker)}`}
                          >
                            {speaker}
                          </a>
                        </p>
                      ))}
                    </td>
                  </tr>
                )
              }
            </Fragment>
          </MetadataTable>
        </div>

        {
          video.description && (
            <div class="p-6">
              <h2 class="mb-2 text-xl font-medium">Description</h2>
              <div class="prose max-w-full">
                <p class="whitespace-pre-line">{video.description}</p>
              </div>
            </div>
          )
        }

        {
          !!video.chapters && (
            <div class="p-6">
              <h2 class="mb-2 text-xl font-medium">Chapters</h2>
              <div class="prose max-w-full">
                <ul>
                  {video.chapters.map((chapter, index, chapters) => (
                    <li>
                      <span
                        class="flex"
                        data-cue={
                          `${chapter.time}-` + (chapters[index + 1]?.time ?? '')
                        }
                      >
                        <span class="grow">{chapter.title}</span>
                        <span class="ml-2 tabular-nums">
                          {formatTimecode(chapter.time)}
                        </span>
                      </span>
                    </li>
                  ))}
                </ul>
              </div>
            </div>
          )
        }

        {
          !!video.transcriptRef && (
            <div class="p-6">
              <h2 class="mb-2 text-xl font-medium">Transcript</h2>
              <div class="font-prose -mx-2 mb-4 bg-yellow-500/15 p-2 text-xs leading-relaxed font-light antialiased">
                <p>
                  {transcriptLanguage === 'th' ? (
                    <span>
                      ‡∏Ñ‡∏≥‡∏ö‡∏£‡∏£‡∏¢‡∏≤‡∏¢‡∏ï‡πà‡∏≠‡πÑ‡∏õ‡∏ô‡∏µ‡πâ‡∏≠‡∏≤‡∏à‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î ‡∏´‡∏≤‡∏Å‡∏Ñ‡∏∏‡∏ì‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏î‡πÜ
                      <a href={transcriptUrl} class="font-medium">
                        ‡∏Ñ‡∏∏‡∏ì‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏ä‡πà‡∏ß‡∏¢‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÑ‡∏î‡πâ‡∏ö‡∏ô GitHub
                      </a>
                    </span>
                  ) : (
                    <span>
                      These community-maintained transcripts may contain
                      inaccuracies.
                      <a href={transcriptUrl} class="font-medium">
                        Please submit any corrections on GitHub.
                      </a>
                    </span>
                  )}
                </p>
              </div>
              <VideoTranscript
                transcriptRef={video.transcriptRef}
                chapters={video.chapters}
              />
            </div>
          )
        }

        <div class="p-6 lg:hidden">
          <VideoActions eventId={eventId} slug={slug} />
        </div>
      </div>
    </div>
    <CueHighlighter 
      iframeId={iframeId} 
      eventId={eventId}
      slug={slug}
      transcriptLanguage={transcriptLanguage}
      client:only="react" 
    />
  </MainHorizontalPadding>
</BaseLayout>

<style>
  @import 'tailwindcss';

  [data-cue-by] :global([data-cue][data-active='true']) {
    @apply bg-yellow-300;
  }
  [data-cue-by][data-interactive='true'] :global([data-cue]) {
    @apply -mx-1 cursor-pointer rounded-md px-1;
  }
</style>
