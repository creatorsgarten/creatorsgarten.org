---
import Blank from '$layouts/blank.astro'
import { CSRF_SECRET } from 'astro:env/server'
import CSRF from 'csrf'

const code = Astro.url.searchParams.get('code') ?? ''
const state = Astro.url.searchParams.get('state') ?? ''

let error: string | null = null
let redirectTo: string = '/'

try {
  // decode authentication state
  const stateMatcher = (state ?? '').match(
    /^(localhost\d{4}|new)!(.+)!(\w+)-(.+)$/
  )

  if (stateMatcher === null) throw new Error('state-invalid')

  const [, redirectHint, destination, targetService, csrfToken] = stateMatcher
  redirectTo = destination

  // if local state, then foward to localhost
  const hintMatcher = redirectHint.match(/^localhost(\d{4})$/)
  if (hintMatcher && import.meta.env.PROD) {
    return Astro.redirect(
      `http://localhost:${hintMatcher[1]}/auth/callback?${new URLSearchParams({
        code: code ?? '',
        state: state ?? '',
      }).toString()}`
    )
  } else if (redirectHint !== 'new' && import.meta.env.PROD) {
    throw new Error('redirect-hint-invalid')
  }

  // verify csrf that it comes from our platform
  if (!new CSRF().verify(CSRF_SECRET, csrfToken))
    throw new Error('csrf-verification-fail')

  // handle authtication from here
  const result = await (() => {
    switch (targetService) {
      case 'eventpop':
        if (code.startsWith('grtn_') && code.includes('|')) {
          const [signature, deviceId] = code.split('|')
          return Astro.locals.backend.auth.signInWithDeviceAuthorizationSignature.mutate(
            { signature, deviceId }
          )
        } else {
          return Astro.locals.backend.auth.signInWithEventpopAuthorizationCode.mutate(
            { code }
          )
        }
      case 'github':
        return Astro.locals.backend.auth.linkGitHubAccount.mutate({ code })
      case 'discord':
        return Astro.locals.backend.auth.linkDiscordAccount.mutate({ code })
      case 'google':
        return Astro.locals.backend.auth.linkGoogleAccount.mutate({ code })
      case 'figma':
        return Astro.locals.backend.auth.linkFigmaAccount.mutate({ code })
    }
    throw new Error('service-invalid')
  })()

  Astro.cookies.set('authgarten', result.idToken, {
    maxAge: 60 * 60 * 12, // 12 hours
    httpOnly: true,
    secure: import.meta.env.PROD,
    path: '/',
    sameSite: 'lax',
  })
} catch (e) {
  error = (e as Error).message
}

if (redirectTo === '/') {
  redirectTo = '/dashboard'
}
---

<Blank>
  <Fragment slot="head">
    <title>Authgarten</title>
    {
      error === null && (
        <meta http-equiv="Refresh" content={'1; url=' + redirectTo} />
      )
    }
  </Fragment>
  <main class="mx-auto max-w-7xl px-4 py-12">
    {
      error !== null ? (
        <>
          <Fragment slot="head">
            <title>Unable to authenticate</title>
          </Fragment>
          <h1 class="text-4xl font-medium">Failed!</h1>
          <p>{error}</p>
        </>
      ) : (
        <>
          <h1 class="text-4xl font-medium">Authenticated!</h1>
          <p>
            Redirecting...{' '}
            <a href={redirectTo} class="underline">
              Click here
            </a>{' '}
            if nothing happens
          </p>
        </>
      )
    }
  </main>
</Blank>
